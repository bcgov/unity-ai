# This is a basic workflow that is manually triggered

name: Workflow - Run manual trigger
permissions:
  contents: read

# Controls when the action will run. Workflow runs when manually triggered
on:
  workflow_dispatch:
    # Inputs the workflow accepts.
    inputs:
      name:
        # Friendly description to be shown in the UI instead of 'name'
        description: 'Environment'
        # Default value if no value is explicitly provided
        default: 'dev'
        # Input has to be provided for the workflow to run
        required: true
        # The data type of the input
        type: string
env:
  TARGET_ENV: ${{ inputs.name }}
  GH_TOKEN: ${{secrets.GH_API_TOKEN}}
  OC_CLUSTER: ${{ vars.OPENSHIFT_CLUSTER }}
  OC_REGISTRY: ${{ vars.OPENSHIFT_REGISTRY }}
  OC_AUTH_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OC_TARGET_PROJECT: ${{ vars.OPENSHIFT_NAMESPACE }}
  JFROG_USERNAME: ${{ secrets.ARTIFACTORY_USERNAME }}
  JFROG_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
  JFROG_REPO_PATH: ${{ vars.ARTIFACTORY_REPO }}
  JFROG_SERVICE:  ${{ vars.ARTIFACTORY_SERVICE }}
  UNITY_AI_BUILD_VERSION: ${{vars.UAI_BUILD_VERSION}}
  UNITY_AI_BUILD_REVISION: ${{vars.UAI_BUILD_REVISION}}

  UNITY_AI_RELEASE_PREFIX: Unity_AI_Reporting_v
  UNITY_AI_RELEASE_MESSAGE: "Manual deployment"

jobs:
  Setup:
    runs-on: ubuntu-latest
    environment: ${{ inputs.name }}
    steps:
    - name: Get variables
      run: |
        echo "Target: $TARGET_ENV"
        echo "BaseRef: $GITHUB_REF_NAME"
        echo "Environment: $TARGET_ENV OC_TARGET_PROJECT=$OC_TARGET_PROJECT"
        echo "Environment: $TARGET_ENV JFROG_REPO_PATH=$JFROG_REPO_PATH"
        echo "..."
        env | sort
    - name: Get current date
      id: date_selector
      run: echo "DATE=$(date +'%B %e, %Y')" >> $GITHUB_OUTPUT
    outputs:
      DATE: ${{steps.date_selector.outputs.DATE}}
  Branch:
    needs: [Setup]
    runs-on: ubuntu-latest
    environment: ${{ inputs.name }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
          fetch-depth: '1'
    - name: Get short commitId
      id: get_commit
      run:  |
        echo "SHA_SHORT=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
    - name: List merged branch
      id: get_branch
      run: |
        MERGED_BRANCH=$(git log --merges --pretty=format:"%s" -1 | grep -oE 'from bcgov/[^ ]+' | sed 's/from bcgov\///')
        if [ -z "$MERGED_BRANCH" ]; then
          echo "Direct push no pull request from bcgov/branch"
          echo "MERGED_BRANCH=push" >> $GITHUB_OUTPUT
        else
          echo "Merged branch: $MERGED_BRANCH"
          echo "MERGED_BRANCH=$MERGED_BRANCH" >> $GITHUB_OUTPUT
        fi
    outputs:
      SHA_SHORT: ${{steps.get_commit.outputs.SHA_SHORT}}
      MERGED_BRANCH: ${{steps.get_branch.outputs.MERGED_BRANCH}}
  PushVariables:
    needs: [Setup,Branch]
    runs-on: ubuntu-latest
    environment: ${{ inputs.name }}
    permissions:
      actions: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
          fetch-depth: '1'
    - name: Set repository version variables
      id: set_version
      run: |
        # gh variable set UAI_BUILD_REVISION --env ${{env.TARGET_ENV}} --body "${{needs.Branch.outputs.SHA_SHORT}}"
        echo "UNITY_AI_BUILD_REVISION=${{needs.Branch.outputs.SHA_SHORT}}" >> $GITHUB_ENV
    - name: Get repository version variables
      id: get_version
      run: |
        gh variable list --env ${{env.TARGET_ENV}}
        echo "..."
        echo "buildArgs --env ${{env.TARGET_ENV}} UNITY_AI_BUILD_VERSION: ${{env.UNITY_AI_BUILD_VERSION}}, UNITY_AI_BUILD_REVISION: ${{env.UNITY_AI_BUILD_REVISION}}, Merged Branch: ${{needs.Branch.outputs.MERGED_BRANCH}}"
  Build:
    needs: [Setup,Branch,PushVariables]
    runs-on: ubuntu-latest
    environment: ${{ inputs.name }}
    steps:
    - uses: actions/checkout@v4
    - name: Build Docker images
      run: |
        echo "buildArgs UNITY_AI_BUILD_VERSION: ${{env.UNITY_AI_BUILD_VERSION}}, UNITY_AI_BUILD_REVISION: ${{env.UNITY_AI_BUILD_REVISION}}"
        docker build --build-arg UNITY_AI_BUILD_VERSION=${{env.UNITY_AI_BUILD_VERSION}} --build-arg UNITY_AI_BUILD_REVISION=${{env.UNITY_AI_BUILD_REVISION}} -t unity-ai-reporting-backend -f applications/Unity.AI.Reporting.Backend/Dockerfile applications/Unity.AI.Reporting.Backend
        docker build --build-arg UNITY_AI_BUILD_VERSION=${{env.UNITY_AI_BUILD_VERSION}} --build-arg UNITY_AI_BUILD_REVISION=${{env.UNITY_AI_BUILD_REVISION}} -t unity-ai-reporting-frontend -f applications/Unity.AI.Reporting.Frontend/Dockerfile applications/Unity.AI.Reporting.Frontend
        docker build -t unity-ai-assessment-backend -f applications/Unity.AI.Assessment.Backend/Dockerfile applications/Unity.AI.Assessment.Backend
        docker build -t unity-ai-assessment-frontend -f applications/Unity.AI.Assessment.Frontend/Dockerfile applications/Unity.AI.Assessment.Frontend
      working-directory: ./
    - name: Connect to JFrog Artifactory non-interactive login using --password-stdin
      run: |
        echo "$JFROG_PASSWORD" | docker login -u "$JFROG_USERNAME" --password-stdin $JFROG_SERVICE
    - name: Push application images to Artifactory container registry
      run: |
        docker tag unity-ai-reporting-backend $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-reporting-backend
        # docker push $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-reporting-backend
        docker tag unity-ai-reporting-frontend $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-reporting-frontend
        # docker push $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-reporting-frontend
        docker tag unity-ai-assessment-backend $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-assessment-backend
        # docker push $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-assessment-backend
        docker tag unity-ai-assessment-frontend $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-assessment-frontend
        # docker push $JFROG_SERVICE/$JFROG_REPO_PATH/unity-ai-assessment-frontend
    - name: Disconnect docker from JFrog Artifactory
      run: |
        docker logout
    - name: Install OpenShift CLI
      run: |
          curl -LO https://mirror.openshift.com/pub/openshift-v4/clients/oc/latest/linux/oc.tar.gz
          tar -xvf oc.tar.gz
          sudo mv oc /usr/local/bin
    - name: Verify OpenShift CLI installation
      run: oc version
    - name: Connect to OpenShift API non-interactive login using current session token
      run: |
        oc login --token=$OC_AUTH_TOKEN --server=$OC_CLUSTER
        oc registry login
        docker login -u unused -p $(oc whoami -t) $OC_REGISTRY
    - name: Push application images to OpenShift container registry
      run: |
        docker tag unity-ai-reporting-backend $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-reporting-backend
        # docker push $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-reporting-backend
        docker tag unity-ai-reporting-frontend $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-reporting-frontend
        # docker push $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-reporting-frontend
        docker tag unity-ai-assessment-backend $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-assessment-backend
        # docker push $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-assessment-backend
        docker tag unity-ai-assessment-frontend $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-assessment-frontend
        # docker push $OC_REGISTRY/$OC_TARGET_PROJECT/unity-ai-assessment-frontend
    - name: Disconnect docker from OpenShift container registry
      run: |
        docker logout
