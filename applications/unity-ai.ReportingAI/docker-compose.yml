services:
  postgres:
    image: pgvector/pgvector:pg16
    environment:
      POSTGRES_DB: unity_ai
      POSTGRES_USER: unity_user
      POSTGRES_PASSWORD: unity_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - unity-ai-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U unity_user -d unity_ai"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build: 
      context: ./src/unity-ai.ReportingAI.Backend
      args:
        - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
        - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
        - AZURE_OPENAI_DEPLOYMENT=${AZURE_OPENAI_DEPLOYMENT}
        - AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${AZURE_OPENAI_EMBEDDING_DEPLOYMENT}
        - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
        - JWT_SECRET=${JWT_SECRET}
        - METABASE_KEY=${METABASE_KEY}
        - MB_EMBED_SECRET=${MB_EMBED_SECRET}
        - MB_EMBED_URL=${MB_EMBED_URL}
        - DB_HOST=postgres
        - DB_PORT=5432
        - DB_NAME=unity_ai
        - DB_USER=unity_user
        - DB_PASSWORD=unity_pass
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_DEPLOYMENT=${AZURE_OPENAI_DEPLOYMENT}
      - AZURE_OPENAI_EMBEDDING_DEPLOYMENT=${AZURE_OPENAI_EMBEDDING_DEPLOYMENT}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - JWT_SECRET=${JWT_SECRET}
      - METABASE_KEY=${METABASE_KEY}
      - MB_EMBED_SECRET=${MB_EMBED_SECRET}
      - MB_EMBED_URL=${MB_EMBED_URL}
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=unity_ai
      - DB_USER=unity_user
      - DB_PASSWORD=unity_pass
    networks:
      - unity-ai-network
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build: 
      context: ./src/unity-ai.ReportingAI.Frontend
      args:
        - JWT_SECRET=${JWT_SECRET}
    ports:
      - "80:80"
    depends_on:
      backend:
        condition: service_started
    networks:
      - unity-ai-network

networks:
  unity-ai-network:
    driver: bridge

volumes:
  postgres_data: